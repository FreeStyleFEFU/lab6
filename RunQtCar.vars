QTGRAPHICS="raster"
QCSUBNET=${QCSUBNET:-192.168.90}
QCIC=${QCIC:-101}
QCCID=${QCCID:-100}
QCGW=${QCGW:-102}
QCAP=${QCAP:-103}
QCLB=${QCLB:-104}
QCPORT=${QCPORT:-":20101"}
QCHPPORT=${QCHPPORT:-":31415"}
QCGPSPORT=${QCGPSPORT:-":63277"}
QCNAPORT=${QCNAPORT:-":4102"}
QCUSER=tesla
QCNICE=0
UI_PLATFORM=${UI_PLATFORM:-SX}
UI_TARGET=${UI_TARGET:-MCU}
GWOPT="--gw $QCSUBNET.$QCGW"
APOPT="--ap $QCSUBNET.$QCAP"
LBOPT="--lb $QCSUBNET.$QCLB"
UDPOPT="--udp $QCPORT"
HPUDPOPT="--udphp $QCHPPORT"
LBGPS="--udpgps $QCGPSPORT"

# Setup QTDIR
if [ -e "$TESLA_LIB/libQtCore.so.4.8.7" ]; then
    export QT_PLUGIN_PATH=$TESLA_BIN/plugins
    QTDIR="$TESLA_LIB"
elif [ -z "$QTDIR" ]; then
    QTDIR=/usr/lib/qt-4.7.2
fi

# QCAPP - name of executable to run
# QCCONF - name of configuration file, if any, that starts the process (and this script)
#          This is sent to the monitor when the app exits to avoid a restart
case $UPSTART_JOB in
ic)
  export DISPLAY=:0
  QCAPP=QtCarCluster
  QCIP="--ip ${QCIP:-$QCSUBNET.$QCIC}"
  QCOPTS="-graphicssystem $QTGRAPHICS --isic --ic $QCICRES --cid $QCSUBNET.$QCCID $GWOPT $UDPOPT $HPUDPOPT $QCIP"
;;
qtcar)
  export DISPLAY=:0
  QCAPP=QtCar
  QCIP="--ip ${QCIP:-$QCSUBNET.$QCCID}"
  QCOPTS="-graphicssystem $QTGRAPHICS --cid $QCCIDRES --ic $QCSUBNET.$QCIC $GWOPT $UDPOPT $HPUDPOPT $QCIP $APOPT"
;;
qtcar-browser)
  export DISPLAY=:0
  QCAPP=QtCarBrowser
  QCIP="--ip ${QCIP:-$QCSUBNET.$QCCID}"
  QCOPTS="-graphicssystem $QTGRAPHICS $GWOPT $UDPOPT $HPUDPOPT $QCIP"
  QCCONF=qtcar-browser
  QCUSER="browser"
;;
qtcar-vehicle)
  QCAPP=QtCarVehicle
  QCCONF=qtcar-vehicle
  QCIP="--ip ${QCIP:-$QCSUBNET.$QCCID}"
  QCOPTS="--cid $QCCIDRES --ic $QCSUBNET.$QCIC $GWOPT $UDPOPT $HPUDPOPT $QCIP"
;;
qtcar-netmanager)
  QCAPP=QtCarNetManager
  QCCONF=qtcar-netmanager
  QCOPTS="$GWOPT"
;;
qtcar-gpsmanager)
  QCAPP=QtCarGpsManager
  QCCONF=qtcar-gpsmanager
  QCOPTS="$GWOPT $HPUDPOPT $LBOPT $LBGPS"
;;
qtcar-mediaserver2)
  QCAPP=QtCarMediaServerV2
  QCCONF=qtcar-mediaserver2
  QCOPTS="$GWOPT"
  QCUSER="mediaserver2"
;;
qtcar-spotifyserver)
  QCAPP=SpotifyServer
  QCCONF=qtcar-spotifyserver
  QCOPTS="$GWOPT"
  QCUSER="spotify"
;;
qtcar-audiod)
  QCAPP=QtCarAudiod
  QCCONF=qtcar-audiod
  QCOPTS="$GWOPT"
;;
qtcar-carserver)
  QCAPP=QtCarServer
  QCCONF=qtcar-carserver
  QCOPTS="$GWOPT"
;;
qtcar-evlogservice)
  QCAPP=QtCarEVLogService
  QCCONF=qtcar-evlogservice
  QCOPTS="$GWOPT"
;;
qtcar-startup)
  QCAPP=QtCarStartup
  QCUSER="root"
  QCCONF=
  QCOPTS=
;;
qtcar-monitor)
  QCAPP=QtCarMonitor
  QCUSER="root"
  QCCONF=
  QCOPTS="$GWOPT"
;;
qtcar-parrot)
  QCAPP=QtCarParrot
  QCCONF=qtcar-parrot
  QCOPTS="$GWOPT"
;;
qtcar-navmapserver)
  export DISPLAY=:0
  QCAPP=QtCarNavMapServer
  QCCONF=qtcar-navmapserver
  QCOPTS="$GWOPT -graphicssystem $QTGRAPHICS --cid"
  ;;
qtcar-ebserver)
  export DISPLAY=:0
  QCAPP=QtCarEbServer
  # ebserver is not monitored
  QCOPTS="$GWOPT -graphicssystem $QTGRAPHICS"
  ;;
ic-ebserver)
  export DISPLAY=:0
  QCAPP=QtCarEbServerIC
  # ebserver is not monitored
  QCOPTS="$GWOPT -graphicssystem $QTGRAPHICS"
  ;;
ic-navserver)
  export DISPLAY=:0
  QCAPP=QtCarNavServer
  # navserver is not monitored
  QCOPTS="$GWOPT -graphicssystem $QTGRAPHICS --isic --ic --rotate 180 --audio ${QCSUBNET}.${QCCID}${QCNAPORT}"
  QCNICE=-10
  ;;
qtcar-tmserver)
  QCAPP=QtCarTMServer
  QCOPTS="$GWOPT $HPUDPOPT"
;;
qtcar-nuanceserver)
  QCAPP=NuanceServer
  QCOPTS="$GWOPT $HPUDPOPT"
;;
mbgl-ic)
  export DISPLAY=:0
  QCAPP=QtCarMapboxClientIC
  QCOPTS="$GWOPT -graphicssystem $QTGRAPHICS"
  ;;
mapbox-proxy-server)
  export DISPLAY=:0
  QCAPP=MapboxProxyServer
  QCOPTS="$GWOPT -graphicssystem $QTGRAPHICS"
  ;;
sim)
  export DISPLAY=:0
  QCAPP=QtCarSim
  QCOPTS="-graphicssystem $QTGRAPHICS"
  ;;
qtcar-speech-recognizer)
  QCAPP=QtCarSpeechRecognizer
  QCCONF=qtcar-speech-recognizer
  QCOPTS="$GWOPT"
;;
ic-china-positionhandler)
  QCAPP=PositionHandlerRouting
  #QCUSER="chinapositioner"
  ;;
china-positionhandler)
  QCAPP=PositionHandlerRouting
  QCUSER="chinapositioner"
  ;;
esac

# enable core-dumps when enable-file is present
COREPREFIX="$TESLA_HOME/core"
if [ -e /etc/enablecoredumps ]; then
  ulimit -c unlimited
  echo "$COREPREFIX.%p" > /proc/sys/kernel/core_pattern
else
  ulimit -c 0
fi

# define convenience functions for upstart jobs
ReportStopped() {
    logger -t $UPSTART_JOB "$QCAPP has stopped"
    if [ "$QCCONF" != "" ]
    then
        printf $QCCONF | socat - UDP:localhost:4999 || true
    fi
}

export LD_LIBRARY_PATH=$QTDIR/lib:${TESLA_LIB:-$PWD/lib}
QCEXEC="exec start-stop-daemon --make-pidfile --pidfile /var/run/$QCAPP.pid --nicelevel $QCNICE --start -d $TESLA_BIN -c $QCUSER --exec $TESLA_BIN/$QCAPP"
